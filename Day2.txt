2 Thread clases 
	-> 1. nest for loop to add items in  List (RAM)
	-> 2. In a for, do some calculations (CPU)
Main
	Create 10 instances of both and observe JVisualVM
	

-------------------------
Lab1  - 
		class .. extends Thread ..run(for loop with random sleep)
		Start 3 threads from main and main should stop execution till one of the threads complete its execution

Lab 2 - Write Thread for processing -> elctrification, Colouring, furniture, ready
	main -> create 3 threads and observe there execution.
	
	import java.util.concurrent.CountDownLatch;
	import java.util.concurrent.CyclicBarrier;

	class Lab2Helper implements Runnable{
		private CyclicBarrier barrier;

		public Lab2Helper(CyclicBarrier barrier) {
			super();
			this.barrier = barrier;
		}

		public void run() {
			try{
			String name = Thread.currentThread().getName();
			System.out.println("Electrification of " + name +"  started....");
			try{ Thread.sleep((int)(Math.random()*1000));}catch(Exception e){}
			barrier.await();
			System.out.println("Electrification Done, waiting to start Colouring for " + name);
			try{ Thread.sleep((int)(Math.random()*1000));}catch(Exception e){}
			barrier.await();
			System.out.println("Colouring Done, waiting for Furniture for " + name);
			try{ Thread.sleep((int)(Math.random()*1000));}catch(Exception e){}
			barrier.await();
			System.out.println(name + " is ready....");
			}catch(Exception e){
				System.out.println(e);
			}
		};
	}

	public class Lab2 {
	public static void main(String[] args) {
		CyclicBarrier barrier = new CyclicBarrier(3);
		Thread t1 = new Thread(new Lab2Helper(barrier));
		t1.setName("Flat1");
		Thread t2 = new Thread(new Lab2Helper(barrier));
		t2.setName("Flat2");
		Thread t3 = new Thread(new Lab2Helper(barrier));
		t3.setName("Flat3");
		t1.start();
		t2.start();
		t3.start();
	}
	}
Lab 3 - ForkJoinPool

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;
import java.util.function.Predicate;
class MyRecursiveTask extends RecursiveTask<List<Integer>>
{
	List<Integer> list;
	Predicate<Integer> filter;
	
	public MyRecursiveTask(List<Integer> list, Predicate<Integer> filter) {
		this.list = list;
		this.filter = filter;
	}

	 private List<MyRecursiveTask> forkthetasks() {
	        List<MyRecursiveTask> subtasks =     new ArrayList<MyRecursiveTask >();

	        MyRecursiveTask  subtask1 = new MyRecursiveTask (list.subList(0, list.size()/2), filter);
	        MyRecursiveTask  subtask2 = new MyRecursiveTask (list.subList( list.size()/2,  list.size()), filter);
	        subtasks.add(subtask1);
	        subtasks.add(subtask2);
	        return subtasks;
	    }

protected List<Integer> compute() {
		System.out.println("In compute of RecursiveTask, current list size " + list.size()  + " , " + Thread.currentThread().getName());
		 //if work is above threshold, break tasks up into smaller tasks
        if(this.list.size() >=100) {
            System.out.println("Splitting workLoad : " + this.list.size());
    
	        List<MyRecursiveTask > subtasks =   forkthetasks();

            for(MyRecursiveTask  subtask : subtasks){
                subtask.fork();
            }
        
        	List<Integer> list1 = new ArrayList<Integer>(); 
          
            for(MyRecursiveTask  subtask : subtasks) {
               list1.addAll(subtask.join());
            }
            return list1;

        } else {
            System.out.println("Doing workLoad myself: " + this.list);
        	List<Integer> list1 = new ArrayList<Integer>(); 
        	
        	for (int i = 0; i< list.size();i++){
        
    			if (filter.test(list.get(i)))
    					list1.add(list.get(i));
    		}
    		return list1;
        }
	}
}



public class Lab3 {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		System.out.println("Entter a number to continue..");
		scanner.nextInt();
	

		List<Integer> list = new ArrayList<>();
		for (int i = 0; i< 400;i++){
				list.add((int)(Math.random() *1000));
		}
		Predicate<Integer> pred = (num)->num>500;
		System.out.println("Before Creating Recursive Task");		
		MyRecursiveTask task = new MyRecursiveTask(list, pred);
		System.out.println("Before Creating ForkJoinPool");
		ForkJoinPool forkJoinPool = new ForkJoinPool();
		System.out.println("Before calling Invoke");
		List<Integer> sortedlist = forkJoinPool.invoke(task);
			System.out.println(sortedlist);
	}

}

Lab 4 - Modify same code for Filtering of String Data and return String collection

Lab 5 - 

public class Lab1 {
	public static void main(String[] args) {
		System.out.println("Current Time = " + new Date() + " in thread " + Thread.currentThread().getName());
		Runnable r = ()->System.out.println(new Date() + " in thread " + Thread.currentThread().getName());
		ScheduledExecutorService ses = Executors.newScheduledThreadPool(1);
		ses.schedule(r, 5, TimeUnit.SECONDS);
	}
	
}


public class Lab2 {
	public static void main(String[] args) {
		System.out.println("Current Time = " + new Date() + " in thread " + Thread.currentThread().getName());
		Runnable r = ()->System.out.println(new Date() + " in thread " + Thread.currentThread().getName());
		ScheduledExecutorService ses = Executors.newScheduledThreadPool(1);
	//	ses.schedule(r, 5, TimeUnit.SECONDS);
		ses.scheduleAtFixedRate(r,5, 2, TimeUnit.SECONDS);
	}
	
}

scheduleAtFixedRate Vs 	scheduleWithFixedDelay
