Lab 7 - go through https://github.com/Vaishali-Tapaswi/SynMultiThreadingFeb/blob/main/Lab1.java
	Understand sync, wait, notify -> THread Dump -> see WAITING (on object monitor)

-----------------------
Lab 6 - Create two buttons - AddFastBall and AddSlowBall
	Fastball - red colour
	SlowBall - yello Color


------------------------
Lab 1 - Create a simple class with main method , modify main method to include 
    	System.out.println("Enter a number to continue..");
		  Scanner scanner = new Scanner(System.in);
		  scanner.nextInt();
      
      Start commandprompt -> jvisualvm
        select application - go to threads
     
Lab 2 - Create a class extends Thread
    class Lab2Support extends Thread{
      @Override
      public void run() {
        for(int i = 0; i < 500;i++){
          System.out.println("Lab2SupportThread " + Thread.currentThread().getName() + "  " + i);
          try{Thread.sleep(100);}catch(Exception e){}
        }
      }
    }

  public class Lab2 {

	public static void main(String[] args) {
		System.out.println("Enter a number to continue..");
		Scanner scanner = new Scanner(System.in);
		scanner.nextInt();

		
		
		Lab2Support ls = new Lab2Support();
		ls.start();
		for(int i = 0; i < 500;i++){
			System.out.println("MainThread " + Thread.currentThread().getName() + "  " + i);
			try{Thread.sleep(100);}catch(Exception e){}
		}
  }
  }
  
  Start jvisualvm and observe thread (dump)
  
Lab 3 - 
import java.util.Scanner;

class Lab3Support implements Runnable{

	static boolean flag = false;
	
	@Override
	public void run() {
		for (int i = 0; i<99999999 && flag == false;i++){
			if (i%100000==0)
					System.out.println(Thread.currentThread().getName() +  " " + i);
		}
		if (flag == false){
			System.out.println("Current Chosen Thread is  " + Thread.currentThread().getName());
			flag = true;
		}
	}
}

public class Lab3 {

	public static void main(String[] args) {
		System.out.println("Enter a number to continue..");
		Scanner scanner = new Scanner(System.in);
		scanner.nextInt();
		Thread t1 = new Thread(new Lab3Support());
		t1.setName("1");
		
		Thread t2 = new Thread(new Lab3Support());
		t2.setName("2");
		
		Thread t3 = new Thread(new Lab3Support());
		t3.setName("3");
		
		t1.start();
		t2.start();
		t3.start();

	}

}

Lab 4 - Java 8 Thread with lambda
public class Lab4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Runnable r = ()->{for (int i = 0; i<99999;i++){
			if (i%1000==0)
				System.out.println(Thread.currentThread().getName() +  " " + i);
		}};
		Thread t1 =new Thread(r);
		t1.setName("T1");
	
		Thread t2 =new Thread(r);
		t2.setName("T2");
		Thread t3 =new Thread(r);
		t3.setName("T3");
		t1.start();
		t2.start();
		t3.start();
}
}

Lab 5 - Copy Lab4.java to Lab5.java, change any thread as daeman thread 
		t1.setDaemon(true);
	Observe JVM does not wait for that thread to complete.	
	
